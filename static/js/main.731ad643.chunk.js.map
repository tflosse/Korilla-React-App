{"version":3,"sources":["Components/Form/NewOrder.js","Components/Form/Form.js","Components/Receipts/Paid.js","Components/Receipts/Receipt.js","Components/Receipts/Receipts.js","data.js","App.js","serviceWorker.js","index.js"],"names":["NewOrder","className","htmlFor","type","placeholder","id","Form","props","onSubmit","handleSearch","value","nameSearch","onChange","handleInput","Paid","isPaid","onClick","event","console","log","onPaidToggle","Receipt","name","main","protein","rice","sauce","drink","cost","Receipts","allReceipts","receipts","map","receipt","i","person","key","order","paid","includes","App","useState","receiptList","setReceiptList","setNameSearch","setPaid","target","preventDefault","filteredReceipts","push","paidArray","receiptIndex","indexOf","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.731ad643.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NewOrder = () => {\n    // Insert functions for date and time,\n    // to assign an order number,\n    // and to calculate cost here once prices of menu items are defined.\n    return(\n        <div className=\"create-new\">\n            <form>\n                <label htmlFor=\"new-order\">New order:</label>\n                <br />\n                <input type=\"text\" placeholder=\"Name\" id=\"new-order\"/> <br />\n                <input type=\"text\" placeholder=\"Order\" /> <br />\n                <label htmlFor=\"order-details\">Order details</label> <br />\n                <input type=\"text\" placeholder=\"Protein\" /> \n                <input type=\"text\" placeholder=\"Rice\" /> <br />\n                <input type=\"text\" placeholder=\"Sauce\" /> \n                <input type=\"text\" placeholder=\"Drink\" /> <br />\n                <p className=\"order-cost\"> Total cost of new order: $ ____ </p>\n                <input type=\"submit\" className=\"submit-button\"/>\n            </form>\n        </div>\n    )\n};\n\nexport default NewOrder;","import React from 'react';\n\nconst Form = (props) => {\n    return (\n    <div className=\"search\">\n        <form onSubmit={props.handleSearch}>\n            <label htmlFor=\"new-search\">Search for... </label>\n            <input type=\"text\" placeholder=\"Search by Name\" id=\"new-search\" value={props.nameSearch}\n            onChange={props.handleInput}/>\n            <input type=\"submit\" className=\"submit-button\"/>\n        </form>\n    </div>\n    )\n} \n\nexport default Form;","import React from 'react';\n\nconst Paid = (props) => {\n    const handlePaid = (event) => {\n        console.log('Handling Paid Click!')\n        props.onPaidToggle();\n    }\n    return (\n    <div className={`order-paid ${props.isPaid? \" check_box\":\" check_box_outline_blank\"}`}\n        onClick={handlePaid}>\n        <p className=\"material-icons\">{props.isPaid? \"check_box\":\"check_box_outline_blank\"} <br />\n        <span>{props.isPaid? \"PAID\":\"\"}</span></p>\n    </div>\n    )\n}\nexport default Paid;","import React from 'react';\nimport Paid from './Paid';\n\nconst Receipt= (props) => {\n    return (\n    <div className=\"receipt\">\n        <h2>{props.name}<br />\n        # {props.id}</h2>\n        <h4>{props.main}</h4>\n        <hr />\n        <br />\n        <div className=\"order-summary\">\n            <p>Protein: {props.protein}<br />\n            Rice: {props.rice}<br />\n            Sauce: {props.sauce}<br />\n            Drink: {props.drink}<br /> </p>\n        </div>\n        <p>Order Total: $ <strong>{props.cost}</strong></p>\n        <br />\n        <Paid onPaidToggle={() => props.onPaidToggle()} isPaid={props.isPaid}/>\n    </div>\n    )\n} \n\nexport default Receipt;","import React from 'react';\nimport Receipt from './Receipt';\n\nconst Receipts = (props) => {\n\n    const allReceipts = props.receipts.map((receipt, i) => {\n        return (\n            <Receipt \n            name={receipt.person} key={receipt.id} id={receipt.id} main={receipt.order.main}\n            protein={receipt.order.protein} rice={receipt.order.rice} sauce={receipt.order.sauce} drink={receipt.order.drink}\n            cost={receipt.order.cost}\n            onPaidToggle={() => props.onPaidToggle(receipt)}\n            isPaid={props.paid.includes(receipt)}\n            />\n        );\n    });\n\n    return (\n        <div className='container'>\n            {allReceipts}\n        </div>\n    );\n};\n\nexport default Receipts;","const receipts = [\n    {\n     id:1,\n     person: \"Karolin\",\n     order: {\n       main: \"Burrito\",\n       protein: \"Organic Tofu\",\n       rice: \"Purple Rice\",\n       sauce: \"Green Crack\",\n       drink: \"Korchata\",\n       cost: 22\n     },\n     paid: false\n   },\n    {\n     id:2,\n     person: \"Jerrica\",\n     order: {\n       main: \"Rice Bowl\",\n       protein: \"Ginger Soy Chix\",\n       rice: \"Sticky Rice\",\n       sauce: \"Korilla\",\n       drink: \"Korchata\",\n       cost: 19\n     },\n     paid: false\n   },\n    {\n     id:3,\n     person: \"Matt\",\n     order: {\n       main: \"Salad Bowl\",\n       protein: \"Organic Tofu\",\n       rice: \"none\",\n       sauce: \"K'lla\",\n       drink: \"Sparkling Blood Orange Soda\",\n       cost: 20\n     },\n     paid: false\n   }\n ]\nexport default receipts;","import React, { useState } from 'react';\nimport NewOrder from \"./Components/Form/NewOrder\";\nimport Form from './Components/Form/Form';\nimport Receipts from './Components/Receipts/Receipts';\nimport receipts from './data';\nimport './App.css';\n\nexport default function App () {\n  const [receiptList,setReceiptList] = useState(receipts);\n  const [nameSearch,setNameSearch] = useState(\"\");\n  const [paid, setPaid] = useState([]);\n\n  const handleInput = event => {\n      setNameSearch(event.target.value);\n      console.log(nameSearch)\n  };\n\n  const handleSearch = event => {\n      event.preventDefault();\n      console.log(\"Fetching receipts for \"+ nameSearch);\n      let filteredReceipts = [];\n      receipts.map(receipt => {\n        if (nameSearch === receipt.person) {\n          filteredReceipts.push(receipt);\n          setReceiptList(filteredReceipts)\n        } else if (nameSearch === \" \") {\n          setReceiptList(receipts)\n        } // to return to all receipts after a filtered search\n      });\n      setNameSearch(\"\");\n  };\n\n  const handlePaidToggle = receipt =>{\n    const paidArray = [...paid];\n    const receiptIndex = paidArray.indexOf(receipt);\n    if (receiptIndex > -1){\n      paidArray.splice(receiptIndex,1);\n    } else {\n      paidArray.push(receipt);\n    }\n    setPaid(paidArray);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"app-name\">Korilla Receipts</h1>\n      <Form handleInput={handleInput} handleSearch={handleSearch} nameSearch={nameSearch}/>\n      <NewOrder />\n      <Receipts receipts={receiptList} \n      paid={paid}\n      onPaidToggle={handlePaidToggle}\n      />\n    </div>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}